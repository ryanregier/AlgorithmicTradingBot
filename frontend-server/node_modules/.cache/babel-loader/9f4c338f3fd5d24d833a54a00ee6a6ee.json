{"ast":null,"code":"'use strict';\n\nconst {\n  toDateString\n} = require('../utils/dateformat');\n\nconst entity = require('./entity'); // timeframe is one of\n// minute, 1Min, 5Min, 15Min, day or 1D.\n// minute is an alias of 1Min. Similarly, day is of 1D.\n// Symbols may be a string or an array\n// options: limit, start, end, after, until\n\n\nfunction getBars(timeframe, symbols, options = {}) {\n  symbols = typeof symbols === 'string' ? symbols : symbols.join(',');\n  return this.dataHttpRequest(`/bars/${timeframe}`, Object.assign({\n    symbols: symbols\n  }, options)).then(resp => {\n    const convertedResponse = {};\n    Object.keys(resp).forEach(symbol => {\n      convertedResponse[symbol] = [];\n      resp[symbol].forEach(bar => {\n        convertedResponse[symbol].push(entity.Bar(bar));\n      });\n    });\n    return convertedResponse;\n  });\n}\n\nfunction getAggregates(symbol, timespan, from, to) {\n  const path = `/aggs/ticker/${symbol}/range/1/${timespan}/${toDateString(from)}/${toDateString(to)}`;\n  return this.dataHttpRequest(path).then(resp => {\n    const convertedResponse = [];\n    resp.results.forEach(bar => {\n      convertedResponse.push(entity.Bar(bar));\n    });\n    resp.results = convertedResponse;\n    return resp;\n  });\n}\n\nfunction getLastTrade(symbol) {\n  const path = `/last/stocks/${symbol}`;\n  return this.dataHttpRequest(path);\n}\n\nfunction getLastQuote(symbol) {\n  const path = `/last_quote/stocks/${symbol}`;\n  return this.dataHttpRequest(path);\n}\n\nmodule.exports = {\n  getAggregates: getAggregates,\n  getBars: getBars,\n  getLastTrade: getLastTrade,\n  getLastQuote: getLastQuote\n};","map":{"version":3,"sources":["D:/Desktop - Data/School/Stock Bot/AlgorithmicTradingBot/frontend-server/node_modules/@alpacahq/alpaca-trade-api/lib/resources/data.js"],"names":["toDateString","require","entity","getBars","timeframe","symbols","options","join","dataHttpRequest","Object","assign","then","resp","convertedResponse","keys","forEach","symbol","bar","push","Bar","getAggregates","timespan","from","to","path","results","getLastTrade","getLastQuote","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,qBAAD,CAAhC;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB,C,CAEA;AACA;AACA;AACA;AACA;;;AACA,SAASE,OAAT,CAAiBC,SAAjB,EAA4BC,OAA5B,EAAqCC,OAAO,GAAG,EAA/C,EAAmD;AACjDD,EAAAA,OAAO,GAAG,OAAOA,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAACE,IAAR,CAAa,GAAb,CAAlD;AACA,SAAO,KAAKC,eAAL,CAAsB,SAAQJ,SAAU,EAAxC,EAA2CK,MAAM,CAACC,MAAP,CAC9C;AAAEL,IAAAA,OAAO,EAAEA;AAAX,GAD8C,EAE9CC,OAF8C,CAA3C,EAGJK,IAHI,CAGEC,IAAD,IAAU;AAChB,UAAMC,iBAAiB,GAAG,EAA1B;AACAJ,IAAAA,MAAM,CAACK,IAAP,CAAYF,IAAZ,EAAkBG,OAAlB,CAA2BC,MAAD,IAAY;AACpCH,MAAAA,iBAAiB,CAACG,MAAD,CAAjB,GAA4B,EAA5B;AACAJ,MAAAA,IAAI,CAACI,MAAD,CAAJ,CAAaD,OAAb,CAAsBE,GAAD,IACrB;AACEJ,QAAAA,iBAAiB,CAACG,MAAD,CAAjB,CAA0BE,IAA1B,CAA+BhB,MAAM,CAACiB,GAAP,CAAWF,GAAX,CAA/B;AACD,OAHD;AAID,KAND;AAOA,WAAOJ,iBAAP;AACD,GAbM,CAAP;AAcD;;AAED,SAASO,aAAT,CAAuBJ,MAAvB,EAA+BK,QAA/B,EAAyCC,IAAzC,EAA+CC,EAA/C,EAAmD;AACjD,QAAMC,IAAI,GAAI,gBAAeR,MAAO,YAAWK,QAAS,IAAGrB,YAAY,CAACsB,IAAD,CAAO,IAAGtB,YAAY,CAACuB,EAAD,CAAK,EAAlG;AACA,SAAO,KAAKf,eAAL,CAAqBgB,IAArB,EAA2Bb,IAA3B,CAAiCC,IAAD,IAAU;AAC/C,UAAMC,iBAAiB,GAAG,EAA1B;AACAD,IAAAA,IAAI,CAACa,OAAL,CAAaV,OAAb,CAAsBE,GAAD,IACrB;AACEJ,MAAAA,iBAAiB,CAACK,IAAlB,CAAuBhB,MAAM,CAACiB,GAAP,CAAWF,GAAX,CAAvB;AACD,KAHD;AAIAL,IAAAA,IAAI,CAACa,OAAL,GAAeZ,iBAAf;AACA,WAAOD,IAAP;AACD,GARM,CAAP;AASD;;AAED,SAASc,YAAT,CAAsBV,MAAtB,EAA8B;AAC5B,QAAMQ,IAAI,GAAI,gBAAeR,MAAO,EAApC;AACA,SAAO,KAAKR,eAAL,CAAqBgB,IAArB,CAAP;AACD;;AAED,SAASG,YAAT,CAAsBX,MAAtB,EAA8B;AAC5B,QAAMQ,IAAI,GAAI,sBAAqBR,MAAO,EAA1C;AACA,SAAO,KAAKR,eAAL,CAAqBgB,IAArB,CAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,aAAa,EAAEA,aADA;AAEfjB,EAAAA,OAAO,EAAEA,OAFM;AAGfuB,EAAAA,YAAY,EAAEA,YAHC;AAIfC,EAAAA,YAAY,EAAEA;AAJC,CAAjB","sourcesContent":["'use strict'\n\nconst { toDateString } = require('../utils/dateformat')\nconst entity = require('./entity');\n\n// timeframe is one of\n// minute, 1Min, 5Min, 15Min, day or 1D.\n// minute is an alias of 1Min. Similarly, day is of 1D.\n// Symbols may be a string or an array\n// options: limit, start, end, after, until\nfunction getBars(timeframe, symbols, options = {}) {\n  symbols = typeof symbols === 'string' ? symbols : symbols.join(',')\n  return this.dataHttpRequest(`/bars/${timeframe}`, Object.assign(\n      { symbols: symbols },\n      options\n  )).then((resp) => {\n    const convertedResponse = {};\n    Object.keys(resp).forEach((symbol) => {\n      convertedResponse[symbol] = [];\n      resp[symbol].forEach((bar) =>\n      {\n        convertedResponse[symbol].push(entity.Bar(bar))\n      })\n    });\n    return convertedResponse;\n  })\n}\n\nfunction getAggregates(symbol, timespan, from, to) {\n  const path = `/aggs/ticker/${symbol}/range/1/${timespan}/${toDateString(from)}/${toDateString(to)}`\n  return this.dataHttpRequest(path).then((resp) => {\n    const convertedResponse = [];\n    resp.results.forEach((bar) =>\n    {\n      convertedResponse.push(entity.Bar(bar))\n    });\n    resp.results = convertedResponse;\n    return resp;\n  })\n}\n\nfunction getLastTrade(symbol) {\n  const path = `/last/stocks/${symbol}`\n  return this.dataHttpRequest(path)\n}\n\nfunction getLastQuote(symbol) {\n  const path = `/last_quote/stocks/${symbol}`\n  return this.dataHttpRequest(path)\n}\n\nmodule.exports = {\n  getAggregates: getAggregates,\n  getBars: getBars,\n  getLastTrade: getLastTrade,\n  getLastQuote: getLastQuote\n}\n"]},"metadata":{},"sourceType":"script"}
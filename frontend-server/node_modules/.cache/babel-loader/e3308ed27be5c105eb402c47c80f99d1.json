{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst WebSocket = require(\"ws\");\n\nconst events = require(\"events\");\n\nconst websockets = require('./websockets');\n\nclass PolygonWebsocket extends events.EventEmitter {\n  constructor(apiKey, session) {\n    super();\n    this._apiKey = apiKey;\n    this.session = session;\n    this.connectCalled = false;\n    this.channels = [];\n  }\n\n  connect(initialChannels) {\n    this.channels = initialChannels;\n    this.reconnectDisabled = false;\n    this.connectCalled = true;\n    this.emit(websockets.STATE.CONNECTING);\n    this.conn = new WebSocket(process.env.DATA_PROXY_WS || 'wss://socket.polygon.io/stocks');\n\n    const connectListener = () => {\n      this.subscribe(initialChannels);\n    };\n\n    this.on(websockets.STATE.CONNECTED, connectListener);\n    this.conn.once(\"open\", () => {\n      this.authenticate();\n    });\n    this.conn.on(\"message\", data => this.handleMessage(data));\n    this.conn.once(\"error\", err => {\n      this.emit(websockets.ERROR.CONNECTION_REFUSED);\n    });\n    this.conn.once(\"close\", () => {\n      this.removeListener(websockets.STATE.CONNECTED, connectListener);\n      this.emit(websockets.STATE.DISCONNECTED);\n\n      if (this.session.reconnect && !this.reconnectDisabled) {\n        this.reconnect();\n      }\n    });\n  }\n\n  handleMessage(data) {\n    // Heartbeat\n    const bytes = new Uint8Array(data);\n\n    if (bytes.length === 1 && bytes[0] === 1) {\n      return;\n    }\n\n    let messageArray = JSON.parse(data);\n    messageArray.forEach(message => {\n      let subject = message.ev;\n\n      switch (subject) {\n        case \"status\":\n          switch (message.status) {\n            case \"auth_success\":\n              this.emit(websockets.STATE.CONNECTED);\n              this.authenticating = false;\n              break;\n\n            case \"auth_failed\":\n              this.emit(websockets.ERROR.BAD_KEY_OR_SECRET);\n              this.authenticating = false;\n              this.close();\n              break;\n          }\n\n          break;\n\n        case \"Q\":\n          this.emit(websockets.EVENT.STOCK_QUOTES, subject, data);\n          break;\n\n        case \"T\":\n          this.emit(websockets.EVENT.STOCK_TRADES, subject, data);\n          break;\n\n        case \"A\":\n          this.emit(websockets.EVENT.STOCK_AGG_SEC, subject, data);\n          break;\n\n        case \"AM\":\n          this.emit(websockets.EVENT.STOCK_AGG_MIN, subject, data);\n          break;\n\n        default:\n          this.emit(websockets.ERROR.PROTOBUF);\n      }\n    });\n  }\n\n  send(data) {\n    this.conn.send(data);\n  }\n\n  authenticate() {\n    this.authenticating = true;\n    this.emit(websockets.STATE.AUTHENTICATING);\n    const authMsg = {\n      action: 'auth',\n      params: this._apiKey\n    };\n    this.send(JSON.stringify(authMsg));\n  }\n\n  subscribe(topics) {\n    const subMsg = {\n      action: 'subscribe',\n      params: topics.join(',')\n    };\n    this.send(JSON.stringify(subMsg));\n    this.channels = this.channels.concat(topics);\n  }\n\n  unsubscribe(topics) {\n    const subMsg = {\n      action: 'unsubscribe',\n      params: topics.join(',')\n    };\n    console.log(JSON.stringify(subMsg));\n    this.send(JSON.stringify(subMsg));\n    this.channels = this.channels.filter(e => topics.indexOf(e) == -1);\n  }\n\n  close() {\n    this.connectCalled = false;\n    this.reconnectDisabled = true;\n\n    if (this.conn) {\n      this.conn.close();\n    }\n  }\n\n  reconnect() {\n    console.log('Attempting Polygon websocket reconnection...');\n    setTimeout(() => {\n      if (this.session.backoff) {\n        this.session.reconnectTimeout += this.session.backoffIncrement;\n\n        if (this.session.reconnectTimeout > this.session.maxReconnectTimeout) {\n          this.session.reconnectTimeout = this.session.maxReconnectTimeout;\n        }\n      }\n\n      this.connect(this.channels);\n    }, this.session.reconnectTimeout * 1000);\n    this.emit(websockets.STATE.WAITING_TO_RECONNECT, this.session.reconnectTimeout);\n  }\n\n}\n\nexports.PolygonWebsocket = PolygonWebsocket;","map":{"version":3,"sources":["D:/Desktop - Data/School/Stock Bot/AlgorithmicTradingBot/frontend-server/node_modules/@alpacahq/alpaca-trade-api/lib/resources/polygonWebsocket.js"],"names":["Object","defineProperty","exports","value","WebSocket","require","events","websockets","PolygonWebsocket","EventEmitter","constructor","apiKey","session","_apiKey","connectCalled","channels","connect","initialChannels","reconnectDisabled","emit","STATE","CONNECTING","conn","process","env","DATA_PROXY_WS","connectListener","subscribe","on","CONNECTED","once","authenticate","data","handleMessage","err","ERROR","CONNECTION_REFUSED","removeListener","DISCONNECTED","reconnect","bytes","Uint8Array","length","messageArray","JSON","parse","forEach","message","subject","ev","status","authenticating","BAD_KEY_OR_SECRET","close","EVENT","STOCK_QUOTES","STOCK_TRADES","STOCK_AGG_SEC","STOCK_AGG_MIN","PROTOBUF","send","AUTHENTICATING","authMsg","action","params","stringify","topics","subMsg","join","concat","unsubscribe","console","log","filter","e","indexOf","setTimeout","backoff","reconnectTimeout","backoffIncrement","maxReconnectTimeout","WAITING_TO_RECONNECT"],"mappings":"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","sourcesContent":["'use strict'\nObject.defineProperty(exports, \"__esModule\", { value: true })\nconst WebSocket = require(\"ws\")\nconst events = require(\"events\")\nconst websockets = require('./websockets')\n\n\nclass PolygonWebsocket extends events.EventEmitter {\n    constructor(apiKey, session) {\n        super()\n\n        this._apiKey = apiKey\n        this.session = session\n        this.connectCalled = false\n        this.channels = []\n    }\n    connect(initialChannels) {\n        this.channels = initialChannels\n        this.reconnectDisabled = false\n        this.connectCalled = true\n        this.emit(websockets.STATE.CONNECTING)\n        this.conn = new WebSocket(process.env.DATA_PROXY_WS ||\n                                    'wss://socket.polygon.io/stocks')\n        const connectListener = () => { this.subscribe(initialChannels) }\n        this.on(websockets.STATE.CONNECTED, connectListener)\n        this.conn.once(\"open\", () => {\n            this.authenticate()\n        })\n        this.conn.on(\"message\", (data) => this.handleMessage(data))\n        this.conn.once(\"error\", err => {\n            this.emit(websockets.ERROR.CONNECTION_REFUSED)\n        })\n        this.conn.once(\"close\", () => {\n            this.removeListener(websockets.STATE.CONNECTED, connectListener)\n            this.emit(websockets.STATE.DISCONNECTED)\n            if (this.session.reconnect && !this.reconnectDisabled) {\n                this.reconnect()\n            }\n        })\n    }\n\n    handleMessage(data) {\n        // Heartbeat\n        const bytes = new Uint8Array(data)\n        if (bytes.length === 1 && bytes[0] === 1) {\n            return\n        }\n        let messageArray = JSON.parse(data)\n        messageArray.forEach(message => {\n            let subject = message.ev\n            switch (subject) {\n                case \"status\":\n                    switch (message.status) {\n                        case \"auth_success\":\n                            this.emit(websockets.STATE.CONNECTED)\n                            this.authenticating = false\n                            break\n                        case \"auth_failed\":\n                            this.emit(websockets.ERROR.BAD_KEY_OR_SECRET)\n                            this.authenticating = false\n                            this.close()\n                            break\n                    }\n                    break\n                case \"Q\":\n                    this.emit(websockets.EVENT.STOCK_QUOTES, subject, data)\n                    break\n                case \"T\":\n                    this.emit(websockets.EVENT.STOCK_TRADES, subject, data)\n                    break\n                case \"A\":\n                    this.emit(websockets.EVENT.STOCK_AGG_SEC, subject, data)\n                    break\n                case \"AM\":\n                    this.emit(websockets.EVENT.STOCK_AGG_MIN, subject, data)\n                    break\n                default:\n                    this.emit(websockets.ERROR.PROTOBUF)\n            }\n        })\n    }\n    send(data) {\n        this.conn.send(data)\n    }\n    authenticate() {\n        this.authenticating = true\n        this.emit(websockets.STATE.AUTHENTICATING)\n\n        const authMsg = {\n            action: 'auth',\n            params: this._apiKey\n        }\n        this.send(JSON.stringify(authMsg))\n    }\n    subscribe(topics) {\n        const subMsg = {\n            action: 'subscribe',\n            params: topics.join(',')\n        }\n        this.send(JSON.stringify(subMsg))\n        this.channels = this.channels.concat(topics)\n    }\n    unsubscribe(topics) {\n        const subMsg = {\n            action: 'unsubscribe',\n            params: topics.join(',')\n        }\n        console.log(JSON.stringify(subMsg))\n        this.send(JSON.stringify(subMsg))\n        this.channels = this.channels.filter(e => topics.indexOf(e) == -1)\n    }\n    close() {\n        this.connectCalled = false\n        this.reconnectDisabled = true\n        if (this.conn) {\n            this.conn.close()\n        }\n    }\n    reconnect() {\n        console.log('Attempting Polygon websocket reconnection...')\n        setTimeout(() => {\n            if (this.session.backoff) {\n                this.session.reconnectTimeout += this.session.backoffIncrement\n                if (this.session.reconnectTimeout > this.session.maxReconnectTimeout) {\n                    this.session.reconnectTimeout = this.session.maxReconnectTimeout\n                }\n            }\n            this.connect(this.channels)\n        }, this.session.reconnectTimeout * 1000)\n        this.emit(websockets.STATE.WAITING_TO_RECONNECT, this.session.reconnectTimeout)\n    }\n}\n\nexports.PolygonWebsocket = PolygonWebsocket\n"]},"metadata":{},"sourceType":"script"}
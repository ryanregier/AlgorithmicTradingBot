{"ast":null,"code":"let alpaca_quote_mapping = {\n  \"T\": \"symbol\",\n  \"X\": \"askexchange\",\n  \"P\": \"askprice\",\n  \"S\": \"asksize\",\n  \"x\": \"bidexchange\",\n  \"p\": \"bidprice\",\n  \"s\": \"bidsize\",\n  \"c\": \"conditions\",\n  \"t\": \"timestamp\"\n};\nlet alpaca_trade_mapping = {\n  \"T\": \"symbol\",\n  \"i\": \"tradeID\",\n  \"x\": \"exchange\",\n  \"p\": \"price\",\n  \"s\": \"size\",\n  \"t\": \"timestamp\",\n  // in millisecond\n  \"z\": \"tapeID\",\n  \"c\": \"conditions\"\n}; // used in websocket with AM.<SYMBOL>\n\nlet alpaca_agg_minute_bar_mapping = {\n  \"T\": \"symbol\",\n  \"v\": \"volume\",\n  \"av\": \"accumulatedVolume\",\n  \"op\": \"officialOpenPrice\",\n  \"vw\": \"vwap\",\n  \"o\": \"openPrice\",\n  \"h\": \"highPrice\",\n  \"l\": \"lowPrice\",\n  \"c\": \"closePrice\",\n  \"a\": \"averagePrice\",\n  \"s\": \"startEpochTime\",\n  \"e\": \"endEpochTime\"\n}; // used with rest bars endpoint\n\nlet alpaca_bar_mapping = {\n  \"t\": \"startEpochTime\",\n  // in seconds\n  \"o\": \"openPrice\",\n  \"h\": \"highPrice\",\n  \"l\": \"lowPrice\",\n  \"c\": \"closePrice\",\n  \"v\": \"volume\"\n};\npolygon_quote_mapping = {\n  \"sym\": \"symbol\",\n  \"ax\": \"askexchange\",\n  \"ap\": \"askprice\",\n  \"as\": \"asksize\",\n  \"bx\": \"bidexchange\",\n  \"bp\": \"bidprice\",\n  \"bs\": \"bidsize\",\n  \"c\": \"condition\",\n  \"t\": \"timestamp\"\n};\n\nfunction AlpacaQuote(data) {\n  return convert(data, alpaca_quote_mapping);\n}\n\nfunction AlpacaTrade(data) {\n  return convert(data, alpaca_trade_mapping);\n}\n\nfunction AggMinuteBar(data) {\n  return convert(data, alpaca_agg_minute_bar_mapping);\n}\n\nfunction Bar(data) {\n  return convert(data, alpaca_bar_mapping);\n}\n\nfunction convert(data, mapping) {\n  const obj = {};\n\n  for (let [key, value] of Object.entries(data)) {\n    if (mapping.hasOwnProperty(key)) {\n      obj[mapping[key]] = value;\n    } else {\n      obj[key] = value;\n    }\n  }\n\n  return obj;\n}\n\nmodule.exports = {\n  'AlpacaTrade': AlpacaTrade,\n  'AlpacaQuote': AlpacaQuote,\n  'AggMinuteBar': AggMinuteBar,\n  'Bar': Bar\n};","map":{"version":3,"sources":["D:/Desktop - Data/School/Stock Bot/AlgorithmicTradingBot/frontend-server/node_modules/@alpacahq/alpaca-trade-api/lib/resources/entity.js"],"names":["alpaca_quote_mapping","alpaca_trade_mapping","alpaca_agg_minute_bar_mapping","alpaca_bar_mapping","polygon_quote_mapping","AlpacaQuote","data","convert","AlpacaTrade","AggMinuteBar","Bar","mapping","obj","key","value","Object","entries","hasOwnProperty","module","exports"],"mappings":"AAEA,IAAIA,oBAAoB,GAAG;AACvB,OAAK,QADkB;AAEvB,OAAK,aAFkB;AAGvB,OAAK,UAHkB;AAIvB,OAAK,SAJkB;AAKvB,OAAK,aALkB;AAMvB,OAAK,UANkB;AAOvB,OAAK,SAPkB;AAQvB,OAAK,YARkB;AASvB,OAAK;AATkB,CAA3B;AAYA,IAAIC,oBAAoB,GAAG;AACvB,OAAK,QADkB;AAEvB,OAAK,SAFkB;AAGvB,OAAK,UAHkB;AAIvB,OAAK,OAJkB;AAKvB,OAAK,MALkB;AAMvB,OAAK,WANkB;AAML;AAClB,OAAK,QAPkB;AAQvB,OAAK;AARkB,CAA3B,C,CAUA;;AACA,IAAIC,6BAA6B,GAAG;AAChC,OAAK,QAD2B;AAEhC,OAAK,QAF2B;AAGhC,QAAM,mBAH0B;AAIhC,QAAM,mBAJ0B;AAKhC,QAAM,MAL0B;AAMhC,OAAK,WAN2B;AAOhC,OAAK,WAP2B;AAQhC,OAAK,UAR2B;AAShC,OAAK,YAT2B;AAUhC,OAAK,cAV2B;AAWhC,OAAK,gBAX2B;AAYhC,OAAK;AAZ2B,CAApC,C,CAeA;;AACA,IAAIC,kBAAkB,GAAG;AACrB,OAAK,gBADgB;AACG;AACxB,OAAK,WAFgB;AAGrB,OAAK,WAHgB;AAIrB,OAAK,UAJgB;AAKrB,OAAK,YALgB;AAMrB,OAAK;AANgB,CAAzB;AASAC,qBAAqB,GAAG;AACpB,SAAO,QADa;AAEpB,QAAM,aAFc;AAGpB,QAAM,UAHc;AAIpB,QAAM,SAJc;AAKpB,QAAM,aALc;AAMpB,QAAM,UANc;AAOpB,QAAM,SAPc;AAQpB,OAAK,WARe;AASpB,OAAK;AATe,CAAxB;;AAYA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAOC,OAAO,CAACD,IAAD,EAAON,oBAAP,CAAd;AACH;;AAED,SAASQ,WAAT,CAAqBF,IAArB,EAA2B;AACvB,SAAOC,OAAO,CAACD,IAAD,EAAOL,oBAAP,CAAd;AACH;;AAED,SAASQ,YAAT,CAAsBH,IAAtB,EAA4B;AACxB,SAAOC,OAAO,CAACD,IAAD,EAAOJ,6BAAP,CAAd;AACH;;AAED,SAASQ,GAAT,CAAaJ,IAAb,EAAmB;AACf,SAAOC,OAAO,CAACD,IAAD,EAAOH,kBAAP,CAAd;AACH;;AAED,SAASI,OAAT,CAAiBD,IAAjB,EAAuBK,OAAvB,EAAgC;AAC5B,QAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAeV,IAAf,CAAzB,EAA+C;AAC3C,QAAIK,OAAO,CAACM,cAAR,CAAuBJ,GAAvB,CAAJ,EAAiC;AAC7BD,MAAAA,GAAG,CAACD,OAAO,CAACE,GAAD,CAAR,CAAH,GAAoBC,KAApB;AACH,KAFD,MAEO;AACHF,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AACH;AACJ;;AACD,SAAOF,GAAP;AACH;;AAEDM,MAAM,CAACC,OAAP,GAAiB;AACb,iBAAeX,WADF;AAEb,iBAAeH,WAFF;AAGb,kBAAgBI,YAHH;AAIb,SAAOC;AAJM,CAAjB","sourcesContent":["\n\nlet alpaca_quote_mapping = {\n    \"T\": \"symbol\",\n    \"X\": \"askexchange\",\n    \"P\": \"askprice\",\n    \"S\": \"asksize\",\n    \"x\": \"bidexchange\",\n    \"p\": \"bidprice\",\n    \"s\": \"bidsize\",\n    \"c\": \"conditions\",\n    \"t\": \"timestamp\"\n};\n\nlet alpaca_trade_mapping = {\n    \"T\": \"symbol\",\n    \"i\": \"tradeID\",\n    \"x\": \"exchange\",\n    \"p\": \"price\",\n    \"s\": \"size\",\n    \"t\": \"timestamp\", // in millisecond\n    \"z\": \"tapeID\",\n    \"c\": \"conditions\",\n};\n// used in websocket with AM.<SYMBOL>\nlet alpaca_agg_minute_bar_mapping = {\n    \"T\": \"symbol\",\n    \"v\": \"volume\",\n    \"av\": \"accumulatedVolume\",\n    \"op\": \"officialOpenPrice\",\n    \"vw\": \"vwap\",\n    \"o\": \"openPrice\",\n    \"h\": \"highPrice\",\n    \"l\": \"lowPrice\",\n    \"c\": \"closePrice\",\n    \"a\": \"averagePrice\",\n    \"s\": \"startEpochTime\",\n    \"e\": \"endEpochTime\",\n};\n\n// used with rest bars endpoint\nlet alpaca_bar_mapping = {\n    \"t\": \"startEpochTime\",  // in seconds\n    \"o\": \"openPrice\",\n    \"h\": \"highPrice\",\n    \"l\": \"lowPrice\",\n    \"c\": \"closePrice\",\n    \"v\": \"volume\",\n};\n\npolygon_quote_mapping = {\n    \"sym\": \"symbol\",\n    \"ax\": \"askexchange\",\n    \"ap\": \"askprice\",\n    \"as\": \"asksize\",\n    \"bx\": \"bidexchange\",\n    \"bp\": \"bidprice\",\n    \"bs\": \"bidsize\",\n    \"c\": \"condition\",\n    \"t\": \"timestamp\"\n};\n\nfunction AlpacaQuote(data) {\n    return convert(data, alpaca_quote_mapping)\n}\n\nfunction AlpacaTrade(data) {\n    return convert(data, alpaca_trade_mapping)\n}\n\nfunction AggMinuteBar(data) {\n    return convert(data, alpaca_agg_minute_bar_mapping)\n}\n\nfunction Bar(data) {\n    return convert(data, alpaca_bar_mapping)\n}\n\nfunction convert(data, mapping) {\n    const obj = {};\n    for (let [key, value] of Object.entries(data)) {\n        if (mapping.hasOwnProperty(key)) {\n            obj[mapping[key]] = value;\n        } else {\n            obj[key] = value;\n        }\n    }\n    return obj;\n}\n\nmodule.exports = {\n    'AlpacaTrade': AlpacaTrade,\n    'AlpacaQuote': AlpacaQuote,\n    'AggMinuteBar': AggMinuteBar,\n    'Bar': Bar\n};\n"]},"metadata":{},"sourceType":"script"}
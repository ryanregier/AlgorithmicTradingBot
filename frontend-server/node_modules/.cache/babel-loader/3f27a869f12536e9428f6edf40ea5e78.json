{"ast":null,"code":"const Alpaca = require('@alpacahq/alpaca-trade-api');\n\nconst alpaca = new Alpaca({\n  keyId: 'PKTSOANLV7FIXQR8NJSR',\n  secretKey: 'H211M4TJ7C7D8AUUuPt50IyAUh6AKTd4idPRWLZc',\n  paper: true,\n  usePolygon: false\n});\n\nfunction getAcctInfo() {\n  alpaca.getAccount().then(account => {\n    console.log('Current Account:', account);\n    return account;\n  });\n}\n\nfunction checkIfTradable(sym) {\n  try {\n    alpaca.getAsset(sym).then(asset => {\n      if (asset.tradable) {\n        console.log('We can trade ' + sym);\n        return true;\n      }\n    });\n  } catch (e) {\n    console.log('ERROR');\n    return false;\n  }\n} //needs to work when it can't trade symbol and shouldn't crash\n\n\ncheckIfTradable('MSFT');\n\nfunction manualTrade(sym, qty, side, type, time_in_force) {\n  alpaca.createOrder({\n    symbol: sym,\n    qty: qty,\n    side: side,\n    type: type,\n    time_in_force: time_in_force\n  });\n}\n\nfunction manualTradeLim(sym, qty, side, type, time_in_force, limit_price) {\n  alpaca.createOrder({\n    symbol: sym,\n    qty: qty,\n    side: side,\n    type: type,\n    time_in_force: time_in_force,\n    limit_price: limit_price\n  });\n}\n\nfunction getClosedOrders() {\n  // Get the last 100 of our closed orders\n  const closedOrders = alpaca.getOrders({\n    status: 'closed',\n    limit: 100,\n    nested: true // show nested multi-leg orders\n\n  }).then(closedOrders => {\n    // Get only the closed orders for a particular stock\n    const closedAaplOrders = closedOrders.filter(order => order.symbol == 'AAPL');\n    console.log(closedAaplOrders);\n  });\n} //getClosedOrders()\n\n\nfunction getAssetList() {\n  // Get a list of all active assets.\n  const activeAssets = alpaca.getAssets({\n    status: 'active'\n  }).then(activeAssets => {\n    // Filter the assets down to just those on NASDAQ.\n    const nasdaqAssets = activeAssets.filter(asset => asset.exchange == 'NASDAQ');\n    console.log(nasdaqAssets);\n  });\n} //getAssetList()\n\n\nfunction getPrice(sym) {} //manualTrade('MSFT',8,'buy','market','day')\n//console.log(\"Committed trade!\")","map":{"version":3,"sources":["D:/Desktop - Data/School/Stock Bot/AlgorithmicTradingBot/frontend-server/src/components/alpacafunctions.js"],"names":["Alpaca","require","alpaca","keyId","secretKey","paper","usePolygon","getAcctInfo","getAccount","then","account","console","log","checkIfTradable","sym","getAsset","asset","tradable","e","manualTrade","qty","side","type","time_in_force","createOrder","symbol","manualTradeLim","limit_price","getClosedOrders","closedOrders","getOrders","status","limit","nested","closedAaplOrders","filter","order","getAssetList","activeAssets","getAssets","nasdaqAssets","exchange","getPrice"],"mappings":"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","sourcesContent":["const Alpaca = require('@alpacahq/alpaca-trade-api')\r\nconst alpaca = new Alpaca({\r\n    keyId: 'PKTSOANLV7FIXQR8NJSR',\r\n    secretKey: 'H211M4TJ7C7D8AUUuPt50IyAUh6AKTd4idPRWLZc',\r\n    paper: true,\r\n    usePolygon: false\r\n})\r\n\r\nfunction getAcctInfo(){\r\n    alpaca.getAccount().then((account) => {\r\n        console.log('Current Account:', account)\r\n        return account\r\n    })\r\n}\r\n\r\nfunction checkIfTradable(sym){\r\n    try {\r\n        alpaca.getAsset(sym)\r\n            .then((asset) => {\r\n                if (asset.tradable) {\r\n                    console.log('We can trade ' + sym)\r\n                    return true\r\n                }\r\n            })\r\n    } catch (e) {\r\n        console.log('ERROR')\r\n        return false\r\n    }\r\n}\r\n//needs to work when it can't trade symbol and shouldn't crash\r\ncheckIfTradable('MSFT')\r\n\r\nfunction manualTrade(sym, qty, side, type, time_in_force){\r\n    alpaca.createOrder({\r\n        symbol: sym,\r\n        qty: qty,\r\n        side: side,\r\n        type: type,\r\n        time_in_force: time_in_force,\r\n    })\r\n}\r\n\r\nfunction manualTradeLim(sym, qty, side, type, time_in_force, limit_price){\r\n    alpaca.createOrder({\r\n        symbol: sym,\r\n        qty: qty,\r\n        side: side,\r\n        type: type,\r\n        time_in_force: time_in_force,\r\n        limit_price: limit_price\r\n    })\r\n}\r\n\r\nfunction getClosedOrders(){\r\n    // Get the last 100 of our closed orders\r\n    const closedOrders = alpaca.getOrders({\r\n        status: 'closed',\r\n        limit: 100,\r\n        nested: true  // show nested multi-leg orders\r\n    }).then((closedOrders) => {\r\n        // Get only the closed orders for a particular stock\r\n        const closedAaplOrders = closedOrders.filter(order => order.symbol == 'AAPL')\r\n        console.log(closedAaplOrders)\r\n    })\r\n}\r\n//getClosedOrders()\r\n\r\nfunction getAssetList(){\r\n    // Get a list of all active assets.\r\n    const activeAssets = alpaca.getAssets({\r\n        status: 'active'\r\n    }).then((activeAssets) => {\r\n        // Filter the assets down to just those on NASDAQ.\r\n        const nasdaqAssets = activeAssets.filter(asset => asset.exchange == 'NASDAQ')\r\n        console.log(nasdaqAssets)\r\n    })\r\n}\r\n//getAssetList()\r\n\r\nfunction getPrice(sym){\r\n\r\n}\r\n\r\n//manualTrade('MSFT',8,'buy','market','day')\r\n//console.log(\"Committed trade!\")\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nconst {\n  toDateString\n} = require('../utils/dateformat');\n\nfunction exchanges() {\n  return this.polygonHttpRequest('/meta/exchanges');\n}\n\nfunction symbolTypeMap() {\n  return this.polygonHttpRequest('/meta/symbol-types');\n} // options: limit, timestamp, timestamp_limit, reverse\n\n\nfunction historicTradesV2(symbol, date, options = {}) {\n  const path = `/ticks/stocks/trades/${symbol}/${toDateString(date)}`;\n  return this.polygonHttpRequest(path, options, null, null, 'v2');\n} // options: limit, timestamp, timestamp_limit, reverse\n\n\nfunction historicQuotesV2(symbol, date, options = {}) {\n  const path = `ticks/stocks/nbbo/${symbol}/${toDateString(date)}`;\n  return this.polygonHttpRequest(path, options, null, null, 'v2');\n} // size: 'day', 'minute'\n// from, to: YYYY-MM-DD or unix millisecond timestamps\n// options: unadjusted\n\n\nfunction historicAggregatesV2(symbol, multiplier, size, from, to, options = {}) {\n  const path = `/aggs/ticker/${symbol}/range/${multiplier}/${size}/${from}/${to}`;\n  return this.polygonHttpRequest(path, options, null, null, 'v2');\n}\n\nfunction lastTrade(symbol) {\n  const path = `/last/stocks/${symbol}`;\n  return this.polygonHttpRequest(path);\n}\n\nfunction lastQuote(symbol) {\n  const path = `/last_quote/stocks/${symbol}`;\n  return this.polygonHttpRequest(path);\n}\n\nfunction conditionMap(ticktype = 'trades') {\n  const path = `/meta/conditions/${ticktype}`;\n  return this.polygonHttpRequest(path);\n}\n\nconst symbolMeta = resource => function (symbol) {\n  const path = `/meta/symbols/${symbol}` + (resource ? `/${resource}` : '');\n  return this.polygonHttpRequest(path);\n};\n\nconst symbolReference = resource => function (symbol) {\n  const path = '/reference' + (resource ? `/${resource}` : '') + `/${symbol}`;\n  return this.polygonHttpRequest(path, {}, null, null, 'v2').then(response => {\n    return response.results;\n  });\n};\n\nconst getSymbol = symbolMeta();\nconst company = symbolMeta('company');\nconst analysts = symbolMeta('analysts');\nconst dividends = symbolReference('dividends');\nconst splits = symbolReference('splits');\nconst earnings = symbolMeta('earnings');\nconst financials = symbolReference('financials');\nconst news = symbolMeta('news');\nmodule.exports = {\n  exchanges,\n  symbolTypeMap,\n  historicTradesV2,\n  historicQuotesV2,\n  historicAggregatesV2,\n  lastTrade,\n  lastQuote,\n  conditionMap,\n  company,\n  analysts,\n  dividends,\n  earnings,\n  financials,\n  splits,\n  news,\n  getSymbol\n};","map":{"version":3,"sources":["D:/Desktop - Data/School/Stock Bot/AlgorithmicTradingBot/frontend-server/node_modules/@alpacahq/alpaca-trade-api/lib/resources/polygon.js"],"names":["toDateString","require","exchanges","polygonHttpRequest","symbolTypeMap","historicTradesV2","symbol","date","options","path","historicQuotesV2","historicAggregatesV2","multiplier","size","from","to","lastTrade","lastQuote","conditionMap","ticktype","symbolMeta","resource","symbolReference","then","response","results","getSymbol","company","analysts","dividends","splits","earnings","financials","news","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { toDateString } = require('../utils/dateformat')\n\nfunction exchanges() {\n  return this.polygonHttpRequest('/meta/exchanges')\n}\n\nfunction symbolTypeMap() {\n  return this.polygonHttpRequest('/meta/symbol-types')\n}\n\n// options: limit, timestamp, timestamp_limit, reverse\nfunction historicTradesV2(symbol, date, options = {}) {\n  const path = `/ticks/stocks/trades/${symbol}/${toDateString(date)}`\n  return this.polygonHttpRequest(path, options, null, null, 'v2')\n}\n\n// options: limit, timestamp, timestamp_limit, reverse\nfunction historicQuotesV2(symbol, date, options = {}) {\n  const path = `ticks/stocks/nbbo/${symbol}/${toDateString(date)}`\n  return this.polygonHttpRequest(path, options, null, null, 'v2')\n}\n\n// size: 'day', 'minute'\n// from, to: YYYY-MM-DD or unix millisecond timestamps\n// options: unadjusted\nfunction historicAggregatesV2(symbol, multiplier, size, from, to, options = {}) {\n  const path = `/aggs/ticker/${symbol}/range/${multiplier}/${size}/${from}/${to}`\n  return this.polygonHttpRequest(path, options, null, null, 'v2')\n}\n\nfunction lastTrade(symbol) {\n  const path = `/last/stocks/${symbol}`\n  return this.polygonHttpRequest(path)\n}\n\nfunction lastQuote(symbol) {\n  const path = `/last_quote/stocks/${symbol}`\n  return this.polygonHttpRequest(path)\n}\n\nfunction conditionMap(ticktype = 'trades') {\n  const path = `/meta/conditions/${ticktype}`\n  return this.polygonHttpRequest(path)\n}\n\nconst symbolMeta = (resource) => function (symbol) {\n  const path = `/meta/symbols/${symbol}` + (resource ? `/${resource}` : '')\n  return this.polygonHttpRequest(path)\n}\n\nconst symbolReference = (resource) => function (symbol) {\n  const path = '/reference' + (resource ? `/${resource}` : '') + `/${symbol}`\n  return this.polygonHttpRequest(path, {}, null, null, 'v2').then((response) => {\n    return response.results;\n  })\n}\n\nconst getSymbol = symbolMeta()\nconst company = symbolMeta('company')\nconst analysts = symbolMeta('analysts')\nconst dividends = symbolReference('dividends')\nconst splits = symbolReference('splits')\nconst earnings = symbolMeta('earnings')\nconst financials = symbolReference('financials')\nconst news = symbolMeta('news')\n\nmodule.exports = {\n  exchanges,\n  symbolTypeMap,\n  historicTradesV2,\n  historicQuotesV2,\n  historicAggregatesV2,\n  lastTrade,\n  lastQuote,\n  conditionMap,\n  company,\n  analysts,\n  dividends,\n  earnings,\n  financials,\n  splits,\n  news,\n  getSymbol,\n}\n"]},"metadata":{},"sourceType":"script"}
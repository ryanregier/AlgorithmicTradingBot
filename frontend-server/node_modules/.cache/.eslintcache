[{"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\index.js":"1","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\reportWebVitals.js":"2","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\App.js":"3","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\MainPage.js":"4","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\LoginForm.js":"5","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Header.js":"6","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Buttons.js":"7","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Trades.js":"8","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\AddTrade.js":"9","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\alpacafunctions.js":"10","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Trade.js":"11","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Images.js":"12"},{"size":517,"mtime":1613840718721,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1613840718722,"results":"15","hashOfConfig":"14"},{"size":1444,"mtime":1615175873470,"results":"16","hashOfConfig":"14"},{"size":3763,"mtime":1615179080098,"results":"17","hashOfConfig":"14"},{"size":1181,"mtime":1615175873471,"results":"18","hashOfConfig":"14"},{"size":998,"mtime":1615175873471,"results":"19","hashOfConfig":"14"},{"size":238,"mtime":1615177144271,"results":"20","hashOfConfig":"14"},{"size":473,"mtime":1615175873473,"results":"21","hashOfConfig":"14"},{"size":2870,"mtime":1615175873471,"results":"22","hashOfConfig":"14"},{"size":2290,"mtime":1615175873473,"results":"23","hashOfConfig":"14"},{"size":678,"mtime":1615175873472,"results":"24","hashOfConfig":"14"},{"size":172,"mtime":1615177173179,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"2xe9gs",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\index.js",[],["55","56"],"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\reportWebVitals.js",[],"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\App.js",["57","58","59","60","61","62"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport React, {useState} from 'react';\r\nimport LoginForm from './components/LoginForm';\r\nimport MainPage from './components/MainPage';\r\nconst Http = new XMLHttpRequest();\r\n\r\n/*Steven Barker*/\r\n\r\nvar loggedIn = false;\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState({name: \"\", email:\"\"});\r\n  const [error, setError] = useState(\"\");\r\n  \r\n  const Login = (details) => {\r\n    console.log(\"Inside Login functions\");\r\n    Http.open(\"GET\", `http://localhost:3500/login/${details.email}/${details.password}`);\r\n    Http.send();\r\n    console.log(\"sending http request\");\r\n    Http.onreadystatechange = function (e) {\r\n      console.log(\"readychangestate\")\r\n      if (this.readyState == 4 && this.status == 200) {\r\n        if(Http.responseText != \"\"){\r\n            console.log(\"logged in\");\r\n            loggedIn = true;\r\n            var update  = {name: Http.responseText, email: details.email};\r\n            setUser(update); \r\n          }else{\r\n            console.log(\"failure\");\r\n            setError(\"Details do not match\");\r\n          }\r\n        }\r\n      }\r\n  }\r\n\r\n  const Logout = () => {\r\n    console.log(\"Logout\");\r\n    loggedIn = false\r\n    setUser(({name: \"\", email: \"\"}));\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {(loggedIn) ? (\r\n        <MainPage/>\r\n      ): ( \r\n        <LoginForm Login={Login} error={error}/>\r\n      )}\r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default App;","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\MainPage.js",["63","64"],"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\LoginForm.js",["65","66"],"import React, {useState} from 'react';\r\nimport App from '../App';\r\n\r\n\r\nfunction LoginForm({Login, error}) {\r\n    const [details, setDetails] = useState({email: \"\", password: \"\"});\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        Login(details)\r\n    }\r\n    return (\r\n        <form onSubmit = {submitHandler}>\r\n           <div className=\"form-inner\">\r\n               <h2>Login</h2>\r\n               {(error != \"\") ? (<div className=\"error\">{error}</div>) : \"\"}\r\n               <div className=\"form-group\">\r\n                    <label htmlFor=\"email\">Email:</label>\r\n                    <input type=\"email\" name=\"email\" id=\"email\" onChange={e => setDetails({...details, email: e.target.value})} value={details.email}/>\r\n               </div>\r\n               <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Password:</label>\r\n                    <input type=\"password\" name=\"password\" id=\"password\" onChange={e => setDetails({...details, password: e.target.value})} value={details.password}/>\r\n               </div>\r\n               <button>Login</button>\r\n            </div> \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Header.js",[],"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Buttons.js",[],"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Trades.js",[],"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\AddTrade.js",[],"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\alpacafunctions.js",["67","68","69","70","71","72","73","74","75","76"],"const Alpaca = require('@alpacahq/alpaca-trade-api')\r\nconst alpaca = new Alpaca({\r\n    keyId: 'PKTSOANLV7FIXQR8NJSR',\r\n    secretKey: 'H211M4TJ7C7D8AUUuPt50IyAUh6AKTd4idPRWLZc',\r\n    paper: true,\r\n    usePolygon: false\r\n})\r\n\r\nfunction getAcctInfo(){\r\n    alpaca.getAccount().then((account) => {\r\n        console.log('Current Account:', account)\r\n        return account\r\n    })\r\n}\r\n\r\nfunction checkIfTradable(sym){\r\n    try {\r\n        alpaca.getAsset(sym)\r\n            .then((asset) => {\r\n                if (asset.tradable) {\r\n                    console.log('We can trade ' + sym)\r\n                    return true\r\n                }\r\n            })\r\n    } catch (e) {\r\n        console.log('ERROR')\r\n        return false\r\n    }\r\n}\r\n//needs to work when it can't trade symbol and shouldn't crash\r\ncheckIfTradable('MSFT')\r\n\r\nfunction manualTrade(sym, qty, side, type, time_in_force){\r\n    alpaca.createOrder({\r\n        symbol: sym,\r\n        qty: qty,\r\n        side: side,\r\n        type: type,\r\n        time_in_force: time_in_force,\r\n    })\r\n}\r\n\r\nfunction manualTradeLim(sym, qty, side, type, time_in_force, limit_price){\r\n    alpaca.createOrder({\r\n        symbol: sym,\r\n        qty: qty,\r\n        side: side,\r\n        type: type,\r\n        time_in_force: time_in_force,\r\n        limit_price: limit_price\r\n    })\r\n}\r\n\r\nfunction getClosedOrders(){\r\n    // Get the last 100 of our closed orders\r\n    const closedOrders = alpaca.getOrders({\r\n        status: 'closed',\r\n        limit: 100,\r\n        nested: true  // show nested multi-leg orders\r\n    }).then((closedOrders) => {\r\n        // Get only the closed orders for a particular stock\r\n        const closedAaplOrders = closedOrders.filter(order => order.symbol == 'AAPL')\r\n        console.log(closedAaplOrders)\r\n    })\r\n}\r\n//getClosedOrders()\r\n\r\nfunction getAssetList(){\r\n    // Get a list of all active assets.\r\n    const activeAssets = alpaca.getAssets({\r\n        status: 'active'\r\n    }).then((activeAssets) => {\r\n        // Filter the assets down to just those on NASDAQ.\r\n        const nasdaqAssets = activeAssets.filter(asset => asset.exchange == 'NASDAQ')\r\n        console.log(nasdaqAssets)\r\n    })\r\n}\r\n//getAssetList()\r\n\r\nfunction getPrice(sym){\r\n\r\n}\r\n\r\n//manualTrade('MSFT',8,'buy','market','day')\r\n//console.log(\"Committed trade!\")\r\n","D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Trade.js",[],"D:\\Desktop - Data\\School\\Stock Bot\\AlgorithmicTradingBot\\frontend-server\\src\\components\\Images.js",["77"],"\r\nconst Images = (props) => {\r\n    return(\r\n        <div>\r\n             <img src={props.image} alt=\"This is the Image\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Images",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":12},{"ruleId":"82","severity":1,"message":"86","line":13,"column":10,"nodeType":"84","messageId":"85","endLine":13,"endColumn":14},{"ruleId":"87","severity":1,"message":"88","line":23,"column":27,"nodeType":"89","messageId":"90","endLine":23,"endColumn":29},{"ruleId":"87","severity":1,"message":"88","line":23,"column":47,"nodeType":"89","messageId":"90","endLine":23,"endColumn":49},{"ruleId":"87","severity":1,"message":"91","line":24,"column":30,"nodeType":"89","messageId":"90","endLine":24,"endColumn":32},{"ruleId":"82","severity":1,"message":"92","line":37,"column":9,"nodeType":"84","messageId":"85","endLine":37,"endColumn":15},{"ruleId":"82","severity":1,"message":"93","line":8,"column":8,"nodeType":"84","messageId":"85","endLine":8,"endColumn":24},{"ruleId":"82","severity":1,"message":"94","line":128,"column":7,"nodeType":"84","messageId":"85","endLine":128,"endColumn":19},{"ruleId":"82","severity":1,"message":"95","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":11},{"ruleId":"87","severity":1,"message":"91","line":16,"column":24,"nodeType":"89","messageId":"90","endLine":16,"endColumn":26},{"ruleId":"82","severity":1,"message":"96","line":9,"column":10,"nodeType":"84","messageId":"85","endLine":9,"endColumn":21},{"ruleId":"82","severity":1,"message":"97","line":33,"column":10,"nodeType":"84","messageId":"85","endLine":33,"endColumn":21},{"ruleId":"82","severity":1,"message":"98","line":43,"column":10,"nodeType":"84","messageId":"85","endLine":43,"endColumn":24},{"ruleId":"82","severity":1,"message":"99","line":54,"column":10,"nodeType":"84","messageId":"85","endLine":54,"endColumn":25},{"ruleId":"82","severity":1,"message":"100","line":56,"column":11,"nodeType":"84","messageId":"85","endLine":56,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":62,"column":76,"nodeType":"89","messageId":"90","endLine":62,"endColumn":78},{"ruleId":"82","severity":1,"message":"101","line":68,"column":10,"nodeType":"84","messageId":"85","endLine":68,"endColumn":22},{"ruleId":"82","severity":1,"message":"102","line":70,"column":11,"nodeType":"84","messageId":"85","endLine":70,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":74,"column":74,"nodeType":"89","messageId":"90","endLine":74,"endColumn":76},{"ruleId":"82","severity":1,"message":"103","line":80,"column":10,"nodeType":"84","messageId":"85","endLine":80,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":5,"column":14,"nodeType":"106","endLine":5,"endColumn":63},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'Logout' is assigned a value but never used.","'AplpacaFunctions' is defined but never used.","'LogoutButton' is assigned a value but never used.","'App' is defined but never used.","'getAcctInfo' is defined but never used.","'manualTrade' is defined but never used.","'manualTradeLim' is defined but never used.","'getClosedOrders' is defined but never used.","'closedOrders' is assigned a value but never used.","'getAssetList' is defined but never used.","'activeAssets' is assigned a value but never used.","'getPrice' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]